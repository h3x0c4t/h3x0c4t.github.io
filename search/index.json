[{"content":"Это продолжение предыдущей статьи.\nЗачем? Я просто ненавижу тратить время на возню с картинками, организацией папок и т.д.\nПоэтому я решил упростить все это дело, чтобы можно было просто создать папку с единственным файлом и писать, а добавление картинок и т.д. происходило автоматически.\nПосле долгих поисков markdown редакторов я решил остановиться на visual studio code.\nВ нем есть встроенная поддержка markdown и git, а также плагин для вставки картинок и сохранения их в нужную папку.\nПлан Организация папок Создаем папку, отделенную от папки с проектом, в которой мы будем редактировать посты.\nВ ней будет еще 2 папки - одна для опубликованных постов, а вторая для черновиков.\nУстановка плагинов для VS Code Для автоматического сохранения картинок в папку при их вставке из буфера устанавливаем плагин Markdown Image.\nТеперь при нажатии Alt + Shift + V картинка будет сохранена в папку images и вставлена в текст.\nПроверьте что у вас такие настройки плагина:\nБолее короткое название файла\nСохраняем картинку на диск\nИмя папки с картинками\nТеперь при вставке картинки в текст она будет сохранена в папку images и вставлена в текст.\nУ меня так же стоит плагин Markdown All in One, который добавляет несколько горячих клавиш.\nА для автоматического форматирования markdownlint.\nАвтоматическая публикация Все дальнейшие действия напрямую связаны с предыдущим постом, поэтому если вы его не читали, то сначала прочитайте его.\nСмысл в том, что мы пишем посты в папке с черновиками (в моем случае in-process), а при переносе в папку с опубликованными постами (в моем случае published) происходит автоматическая публикация.\nСоздаем файл .gitingore в корне и добавляем в него папку с черновиками:\n1 in-process/ Создаем workflow .github/workflows/UpdatePosts.yml:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 name: UpdatePosts on: push: branches: - main jobs: deploy: name: Deploy runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 - name: Push to repo uses: s0/git-publish-subdir-action@v2.6.0 env: REPO: \u0026lt;SSH-адрес репозитория из предыдущего поста\u0026gt; BRANCH: main FOLDER: published # имя папки с опубликованными постами SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }} TARGET_DIR: content/post Далее необходимо создать ssh-ключ для автоматической публикации:\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; Теперь создаем пустой репозиторий на github и добавляем сгенерированный приватный ключ в секреты репозитория с именем DEPLOY_PRIVATE_KEY:\nВ репозитории из предыдущего поста добавляем сгенерированный публичный ключ в Deploy keys:\nСоздание и публикация нового поста Создадим новый пост в папке с черновиками. Структура папки выглядит следующим образом:\nВ корне находится файл template.md, который содержит шаблон front matter.\nПапка называется так же, как и тэг slug в front matter (так будет отображаться путь в URL). Внутри папки находится файл index.md, который содержит текст поста.\nКартинки автоматически сохраняются в папку images.\nПосле написания поста просто перетаскиваем его в папку published.\nДля дальнейшей работы у вас должны быть настроены ssh-ключи доступа (гайд).\nИнициализируем репозиторий и пушим:\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin \u0026lt;ssh-адрес репозитория\u0026gt; git push -u origin main После этого, если все сделано правильно, папка published должна появиться в репозитории с опубликованными постами.\nЗатем workflow запустится автоматически и запушит изменения в репозиторий с блогом в папку content/post.\nПосле этого можно проверить, что пост опубликовался (если настроен workflow для автоматической публикации из предыдущего поста).\nРезультат в гифке TODO\n","date":"2023-01-08T00:00:00Z","image":"https://h3x0c4t.github.io/p/create-posts-easily/cover_hu9efdcf6f44f4b25ae5b988ad08762503_54911_120x120_fill_box_smart1_3.png","permalink":"https://h3x0c4t.github.io/p/create-posts-easily/","title":"Упрощаем создание и публикацию постов"},{"content":"До автоматизации Создаем новый проект: hugo new \u0026lt;название\u0026gt;\nНа GitHub создаем репозиторий с названием \u0026lt;username\u0026gt;.github.io\nДля того, чтобы дальше все проходило без ошибок, убедитесь что у настроены SSH ключи на GitHub. Как это сделать описано здесь\nДалее в папке с проектом выполняем команды:\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;First commit\u0026#34; git branch -M main git remote add origin \u0026lt;SSH ссылка на ваш репозиторий\u0026gt; git push -u origin main После этого в вашем репозитории должен появиться проект.\nАвтоматизация Для автоматизации создадим файл .github/workflows/gh-pages.yml с содержимым:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 name: GitHub Pages on: push: branches: - main # Ветка, при пуше в которую будет запускаться деплой pull_request: jobs: deploy: runs-on: ubuntu-22.04 permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.109.0\u0026#34; # Версия Hugo extended: true # Если вам нужна extended версия Hugo - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 # Если вы используете другую ветку, то измените # `main` на вашу ветку в `refs/heads/main` ниже. if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public Теперь, при каждом коммите в ветку main будет запускаться автоматизация, которая соберет проект и запушит его в ветку gh-pages.\nЗапушим новый файл в репозиторий:\n1 2 3 git add . git commit -m \u0026#34;Add GitHub Actions\u0026#34; git push После этого, в разделе Actions должен появиться новый воркфлоу, а в ветке gh-pages должен появиться собранный проект.\nТеперь, нужно перейти в настройки репозитория и в разделе Pages выбрать ветку gh-pages и папку / (root).\nПосле сохранения с айт будет доступен по адресу \u0026lt;username\u0026gt;.github.io.\nДополнительно Добавление своего домена Для того, чтобы добавить свой домен, нужно создать файл CNAME в папке static с содержимым:\n1 \u0026lt;your-domain\u0026gt; Пушим изменения в репозиторий:\n1 2 3 git add . git commit -m \u0026#34;Add CNAME\u0026#34; git push Затем, нужно добавить следующие A записи в DNS:\n1 2 3 4 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 Также, нужно добавить следующие CNAME записи в DNS:\n1 \u0026lt;username\u0026gt;.github.io Через некоторое время, сайт будет доступен по вашему домену.\nЧтобы принудительного включения HTTPS, ставим галочку Enforce HTTPS в настройках репозитория.\nДобавление сабдомена Если же вы хотите чтобы сайт был доступен по сабдомену, то также нужно создаем файл CNAME в папке static с содержимым:\n1 \u0026lt;subdomain\u0026gt;.\u0026lt;your-domain\u0026gt; Пушим изменения в репозиторий:\n1 2 3 git add . git commit -m \u0026#34;Add CNAME\u0026#34; git push Затем, в панели управления доменом добавляем CNAME запись в DNS:\n1 \u0026lt;username\u0026gt;.github.io Через некоторое время, сайт будет доступен по сабдомену.\n","date":"2023-01-07T00:00:00Z","image":"https://h3x0c4t.github.io/p/hugo-github-actions/cover_hu20607d8d08849faa0da8610b91d92596_22960_120x120_fill_box_smart1_3.png","permalink":"https://h3x0c4t.github.io/p/hugo-github-actions/","title":"Автоматизация Hugo с GitHub Actions"}]